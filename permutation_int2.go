package main

import (
	"fmt"
	"strings"
)

func main() {

	fmt.Println(findPermutation(""))
}

func findPermutation(s string) []int {

	count := len(s) + 1
	arr := permutation(count, s)
	for i := 0; i < len(arr); i++ {
		arr[i]++
	}
	return arr
}

func permutation(n int, str string) []int {

	arr := make([]bool, n)
	outArr := make([]int, n)
	return getNextPermutation(&arr, &outArr, 0, n, str)

}

func getNextPermutation(boolArr *[]bool, outArr *[]int, currentIndex int, totalIndex int, str string) []int {

	if currentIndex == totalIndex {
		if convertArrToString(outArr, currentIndex) == str {
			return *outArr
		}
		return nil
	}
	if currentIndex >= 2 {
		bb := convertArrToString(outArr, currentIndex)
		if !strings.HasPrefix(str, bb) {
			fmt.Println("Rejecting ", bb)
			return nil
		}

	}
	for i := 0; i < totalIndex; i++ {

		if !(*boolArr)[i] {
			(*boolArr)[i] = true
			(*outArr)[currentIndex] = i
			if a := getNextPermutation(boolArr, outArr, currentIndex+1, totalIndex, str); a != nil {
				return a
			}
			(*boolArr)[i] = false
			(*outArr)[currentIndex] = 0
		}

	}
	return nil
}

func convertArrToString(arr *[]int, n int) string {
	barray := make([]byte, n-1)
	for i := 0; i < n-1; i++ {
		c := (byte)('I')
		if (*arr)[i] > (*arr)[i+1] {
			c = (byte)('D')
		}
		barray[i] = c
	}
	return string(barray)
}
